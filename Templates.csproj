<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <PackageType>Template</PackageType>
    <PackageId>Kurmann.AutomateVideoPublishing.Templates</PackageId>
    <Title>Automate Video Publishing Templates</Title>
    <Authors>Patrick Kurmann</Authors>
    <Description>Vorlagen basierend auf .NET für das Automate Video Publishing-Projekt.</Description>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/kurmann/AutomateVideoPublishing.Templates</RepositoryUrl>
    <PackageTags>dotnet-new;templates</PackageTags>
    <TargetFramework>netstandard2.0</TargetFramework>

    <!-- Die Version sollte mit jeder Veröffentlichung auf Nuget.org erhöht werden. Die Release Notes dürfen Umbrüche 
    enthalten, jedoch keine spezifischen Markdown-Formatierungen wie fett oder kursiv oder Überschriften -->
    <PackageVersion>1.2.0</PackageVersion>
    <PackageReleaseNotes>
Initiale Veröffentlichung für Nuget.org mit dem Service Collection Integrated Module (SCI Module). Das ServiceCollectionIntegratedModuleTemplate ist das erste Template in dieser Sammlung, entworfen für die nahtlose Erstellung von Modulen, die einfach mit der IServiceCollection für Dependency Injection integriert werden können. Dieses Template legt Wert auf Modularität, Event-Driven Design und klare Operationsergebnis-Typen, um den Entwicklungsprozess zu vereinfachen und Konsistenz über Module hinweg zu gewährleisten.

Service Collection Integrated Module (SCI Module)
Kurzname: scimodule

Das ServiceCollectionIntegratedModuleTemplate ist das erste Template in dieser Sammlung, entworfen für die nahtlose Erstellung von Modulen, die einfach mit der IServiceCollection für Dependency Injection integriert werden können. Dieses Template legt Wert auf Modularität, Event-Driven Design und klare Operationsergebnis-Typen, um den Entwicklungsprozess zu vereinfachen und Konsistenz über Module hinweg zu gewährleisten.

Features:
- IServiceCollection Integration: Erleichtert die Registrierung von Diensten mit der IServiceCollection, was die Dependency Injection verbessert.
- Modulare Architektur: Hält sich an unsere Prinzipien von hoher Kohäsion und loser Kopplung.
- Event-Driven Design: Beinhaltet Event- und Delegate-Muster für die Nachrichtenverarbeitung innerhalb des Moduls.
- Operationsergebnis-Typen: Nutzt Result&lt;T&gt; für die explizite Handhabung von Erfolgs- und Fehlerfällen.
- Einfache Integration: Entwickelt für die mühelose Eingliederung in Host-Anwendungen.
    </PackageReleaseNotes>

    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>PackageIcon.png</PackageIcon>

    <IncludeContentInPackage>true</IncludeContentInPackage>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <ContentTargetFolders>content</ContentTargetFolders>

    <!-- Die Gitignore-Datei ist hier enthalten, da es sich um eine Lösungsvorlage für ein Modul handelt, das auf einem dedizierten Git-Repository basiert. -->
    <NoDefaultExcludes>true</NoDefaultExcludes>

    <!-- Templates enthalten in der Regel keine lib oder ref Ordner, da sie keine ausführbaren Codes oder Bibliotheken 
    liefern, sondern eher eine Sammlung von Dateien und Ordnern, die als Ausgangspunkt für neue Projekte dienen. 
    Deshalb kann die Warnung NU5128 ignoriert werden, solange das Template korrekt konfiguriert ist und wie erwartet 
    funktioniert. -->
    <NoPackageAnalysis>true</NoPackageAnalysis>

  </PropertyGroup>

  <ItemGroup>
    <Content Include="templates\**\*" Exclude="templates\**\bin\**\*;templates\**\obj\**\*" />
    
    <Compile Remove="**\*" />
    
    <!-- remove MacOS specific files -->
    <Content Remove="**\*.DS_Store" />

    <None Include="README.md" Pack="true" PackagePath="\"/>
    <None Include="LICENSE" Pack="true" PackagePath="\"/>
    <None Include="PackageIcon.png" Pack="true" PackagePath="\"/>

  </ItemGroup>

</Project>